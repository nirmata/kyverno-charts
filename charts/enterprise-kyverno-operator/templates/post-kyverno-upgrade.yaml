{{- if not .Values.kyverno.templating.enabled -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "kyverno.fullname" . }}-hook-post-upgrade
  namespace: {{ template "kyverno.namespace" . }}
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
spec:
  backoffLimit: 2
  template:
    spec:
      serviceAccount: {{ template "kyverno.admission-controller.serviceAccountName" . }}
      {{- with .Values.kyverno.helm.policyReportsCleanup.podSecurityContext }}
      securityContext:
        {{- tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      restartPolicy: Never
      containers:
        - name: kubectl
          image: {{ (include "kyverno.image" (dict "globalRegistry" ((.Values.kyverno.global).image).registry "image" .Values.kyverno.helm.policyReportsCleanup.image "defaultTag" (default .Chart.AppVersion .Values.kyverno.helm.policyReportsCleanup.image.tag))) | quote }}
          imagePullPolicy: {{ .Values.kyverno.helm.policyReportsCleanup.image.pullPolicy }}
          command:
            - sh
            - -c
            - |
              echo "waiting"
              sleep 60
              kubectl wait --for=condition=available deployment/kyverno-admission-controller --timeout=60s --namespace=kyverno
              kubectl wait --for=condition=available deployment/kyverno-background-controller --timeout=60s --namespace=kyverno
              kubectl wait --for=condition=available deployment/kyverno-reports-controller --timeout=60s --namespace=kyverno
              kubectl wait --for=condition=available deployment/kyverno-cleanup-controller --timeout=60s --namespace=kyverno

              NAMESPACES=$(kubectl get namespaces --no-headers=true | awk '{print $1}')

              for ns in $NAMESPACES; do
                  COUNT=$(kubectl get policyreports.wgpolicyk8s.io -n "$ns" --no-headers=true | awk '/pol/{print $1}' | wc -l)

                  if [ "$COUNT" -gt 0 ]; then
                      echo "deleting $COUNT policyreports in namespace $ns"
                      kubectl get policyreports.wgpolicyk8s.io -n "$ns" --no-headers=true | awk '/pol/{print $1}' | xargs kubectl delete -n "$ns" policyreports.wgpolicyk8s.io
                  else
                      echo "no policyreports in namespace $ns"
                  fi
              done

              COUNT=$(kubectl get clusterpolicyreports.wgpolicyk8s.io --no-headers=true | awk '/pol/{print $1}' | wc -l)

              if [ "$COUNT" -gt 0 ]; then
                  echo "deleting $COUNT clusterpolicyreports"
                  kubectl get clusterpolicyreports.wgpolicyk8s.io --no-headers=true | awk '/pol/{print $1}' | xargs kubectl delete clusterpolicyreports.wgpolicyk8s.io
              else
                  echo "no clusterpolicyreports"
              fi
          {{- with .Values.kyverno.helm.policyReportsCleanup.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
{{- end -}}

