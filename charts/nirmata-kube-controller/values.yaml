# # Default values for nirmata-kube-controller.
# # This is a YAML-formatted file.
# # Declare variables to be passed into your templates.

# Specifies the WebSocket URL for connecting to the Nirmata service.
nirmataURL: "wss://nirmata.io/tunnels"

# Defines the Kubernetes namespace where the Nirmata components will be deployed.
namespace: "nirmata"

#  Contains global configuration settings that is applied across different components.
global:
  # The container registry from which images will be pulled.
  # Replace with your desired container registry.
  imageRegistry: ghcr.io
  # The repository from which images will be pulled.
  # Replace with your desired container repository.
  imageRepository: nirmata

  # ImagePullSecret Configuration
  # Set to true to create the imagePullSecret, false to use an existing secret
  createSecret: false
  # Name of the imagePullSecret to use (created or existing)
  imagePullSecretName: nirmata-controller-registry-secret

  # Credentials for the private container registry (required only if createSecret: true).
  registryUserName:
  registryPassword:

  # Usage Examples:
  # 1. Create secret with AWS ECR credentials:
  #    createSecret: true
  #    registryUserName: AWS
  #    registryPassword:
  #    imagePullSecretName: my-ecr-secret
  #
  # 2. Use existing secret:
  #    createSecret: false
  #    imagePullSecretName: my-existing-secret
  #    (registryUserName and registryPassword not needed)

# otelAgent contains configuration for the nirmata otel agent, which is used for observability and monitoring.
otelAgent:
  # imageTag is the tag or version of the otel-agent image.
  imageTag: "0.108.0"

  kubectlImage: "ghcr.io/nirmata/kubectl:1.31"
  # resources defines the resource requests and limits for the otel-agent
  resources:
    requests:
      cpu: 100m
      memory: 200Mi
    limits:
      cpu: 500m
      memory: 1024Mi
  # nodeSelector allows scheduling the pod on specific nodes
  # Example:
  # nodeSelector:
  #   kubernetes.io/os: linux
  #   node-type: worker
  nodeSelector: {}
  # tolerations allows the pod to be scheduled on nodes with matching taints
  # Example:
  # tolerations:
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "nirmata"
  #   effect: "NoSchedule"
  tolerations: []

# kubeController contains configuration for the nirmata-kube-controller.
kubeController:
  # imageTag is the tag or version of the nirmata-kube-controller image. If added, it will override the  .Chart.AppVersion
  imageTag: ""
  # customCACert contains the custom CA certificate data in base64 encoded format
  customCACert: ""
  # customCaConfigMap specifies an existing ConfigMap containing CA certificate. If provided, this will be used instead of creating a new ConfigMap from customCACert
  customCaConfigMap: ""
  # insecure enables insecure communication with the Nirmata service (skips TLS verification)
  insecure: false
  # resources defines the resource requests and limits for the nirmata-kube-controller
  resources:
    requests:
      cpu: 250m
      memory: 200Mi
    limits:
      cpu: 500m
      memory: 2Gi
  # nodeSelector allows scheduling the pod on specific nodes
  # Example:
  # nodeSelector:
  #   kubernetes.io/os: linux
  #   node-type: worker
  nodeSelector: {}
  # tolerations allows the pod to be scheduled on nodes with matching taints
  # Note: A default toleration for master nodes is automatically included
  # Example:
  # tolerations:
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "nirmata"
  #   effect: "NoSchedule"
  tolerations: []

# cluster contains configuration related to the Kubernetes cluster which is being onboarded to NCH.
cluster:
# name used for cluster by nch (Default: kubesystem namespace ID)
  name: ""

# type of the cluster categorised by nch. (Default value is "default-policy-manager-type")
  type: default-policy-manager-type

# labels is a set of key-value pairs that can be used to label the cluster while onboarding the cluster to Nirmata Control Hub.
# These labels are passed as command-line arguments to the Nirmata Kubernetes controller in the deployment.
# Example:
# labels:
#   key1: value1
#   key2: value2
#
# When set, the labels are reflected in the Helm template as follows:
# In the `deployment.yaml`:
#       - "-cluster-labels"
#       - "key1:value1"
#       - "-cluster-labels"
#       - "key2:value2"
  labels: {}

# api token is just for registering the cluster to Nirmata Control Hub.
# This token is required for the nirmata-kube-controller to communicate with the Nirmata Control Hub. (Required)
apiToken: ""

clusterOnboardingToken: ""

# apiTokenSecret is the name of the secret containing the API token.
apiTokenSecret: "nirmata-api-token"

# features enables or disables specific features while installing kube-controller.
# features:
#   policyExceptions:
#     enabled: false
#   policySets:
#     enabled: false

# readWriteMode determines whether the nirmata-kube-controller operates in read-write mode or read-only mode.
# When set to `true`, the controller can make changes to the CR. When `false`, it operates in a read-only manner.
readWriteMode: false

# isNpmOnly determines whether the nirmata-kube-controller is only for NPM.
isNpmOnly: false

# proxy contains configuration for proxy settings if the KubeController needs to communicate through a proxy.
proxy:
 # httpProxy is the HTTP proxy URL.
  httpProxy: ""
 # httpsProxy is the HTTPS proxy URL.
  httpsProxy: ""
 # noProxy is a comma-separated list of domains or IP addresses that should bypass the proxy.
  noProxy: ""
