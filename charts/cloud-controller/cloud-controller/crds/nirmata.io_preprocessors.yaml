---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.15.0
  name: preprocessors.nirmata.io
spec:
  group: nirmata.io
  names:
    kind: Preprocessor
    listKind: PreprocessorList
    plural: preprocessors
    singular: preprocessor
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Preprocessor is the Schema for the preprocessor API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: PreprocessorSpec defines how to preprocess the input payload
            properties:
              admission:
                description: Admission defines the metadata used to preprocess input
                  payload from Admission requests
                properties:
                  apiDefinitions:
                    description: APIDefinitions define a list of urls to fetch the
                      API definitions
                    items:
                      type: string
                    type: array
                  idRules:
                    description: IDRules defines the rules to extract the resource
                      name based on the provider, service, resource, and action.
                    items:
                      description: IDRule defines a rule for getting the name for
                        a specific MatchCondition.
                      properties:
                        identifierPath:
                          description: IdentifierPath is a JMESPath expression to
                            extract the identifier from the input payload.
                          type: string
                        match:
                          description: Match is used to match against the request.
                          properties:
                            action:
                              description: Action is the action performed on the resource
                              type: string
                            provider:
                              description: Provider is the name of the cloud provider
                              enum:
                              - AWS
                              - Azure
                              - GCP
                              type: string
                            resource:
                              description: Resource is the type of the cloud resource
                              type: string
                            service:
                              description: Service is the name of the cloud service
                              type: string
                          required:
                          - provider
                          type: object
                      required:
                      - identifierPath
                      - match
                      type: object
                    type: array
                type: object
              cloudEvent:
                description: CloudEvent define the metadata used to preprocess input
                  payload from CloudEvents
                properties:
                  arnPath:
                    description: ARNPath is a JMESPath expression to extract the ARN
                      from the input payload
                    type: string
                  payloadPath:
                    description: PayloadPath is a JMESPath expression to extract the
                      payload from the input payload
                    type: string
                required:
                - arnPath
                - payloadPath
                type: object
              match:
                description: Match defines the conditions on which to match the input
                  payload
                properties:
                  action:
                    description: Action is the action performed on the resource
                    type: string
                  provider:
                    description: Provider is the name of the cloud provider
                    enum:
                    - AWS
                    - Azure
                    - GCP
                    type: string
                  resource:
                    description: Resource is the type of the cloud resource
                    type: string
                  service:
                    description: Service is the name of the cloud service
                    type: string
                required:
                - provider
                type: object
            required:
            - match
            type: object
          status:
            description: PreprocessorStatus defines the observed state of Preprocessor
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
